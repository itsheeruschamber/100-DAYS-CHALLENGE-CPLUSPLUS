String 

In C++, a string is a dynamic sequence of characters. std::string simplifies manipulation with built-in functions, offering efficiency and safety.

Using namespace std;   use it to avoid making use of std:: library again and again 

                      String initialization in c++ 

Dynamic way:

        string n;

        getline(cin,n);

        cout<<n;

Static way :

        char str[10]= {'C', '+', '+', '\0'};

The \0 is the null character in C and C++. It serves as the string terminator, indicating the end of a string. When used in a character array, it marks the end of the string data.

                          String operations 

strcpy: Copy string data.

strcat: Concatenate two strings.

strlen: Get string length.

strcmp: Compare two strings.

strchr: Locate character in string.

In string Index start from 0 

                Length start from 1

Example : khadeer  length is 7 , Index of r is 6




                        Libraries and Operations 

<iostream>

Basic Input/Output: std::cin, std::cout
String Output: std::cout << "Hello";
<string>

String Declaration:  string myString = "Hello";

String Concatenation: myString = myString + " World";

String Length: myString.length()

<cstring>

String Copying: strcpy(str1, str2);
String Concatenation: strcat(dest, source);
String Length: strlen(str):

<sstream>

istringstream (Input String Stream):

Purpose: Used for reading from strings.

Example: 

#include <iostream>

#include <sstream>

using namespace std;

int main()

{

    string str = "123";

    int numericVar;

    istringstream iss(str);

    iss >> numericVar;

    cout << "Original String: " << str << endl;

    cout << "Converted Numeric Value: " <<numericVar << endl;

    return 0;

}

Output : int: 123, Float: 45.6, String: hello

std::ostringstream (Output String Stream):

Purpose: Used for writing to strings.
Example:
#include <iostream>
#include <sstream>
int main()
{
    std::ostringstream oss;
    int intValue = 123;
    float floatValue = 45.6;
    std::string stringValue = "hello";
    oss << "Int: " << intValue << ", Float: " << floatValue << ", String: " << stringValue;
    std::string outputStr = oss.str();
    std::cout << "Concatenated String: " << outputStr << std::endl;
    return 0;
}
Concatenated String: Int: 123, Float: 45.6, String: hello

std::stringstream (Input/Output String Stream):

Purpose: Supports both reading and writing operations on strings.

Example:

#include <iostream>

#include <sstream>

using namespace std;

int main() {

    stringstream ss;

    int intValue = 123;

    float floatValue = 45.6;

    string stringValue = "hello";

    ss << "Int: " << intValue << ", Float: " << floatValue << ", String: " << stringValue;

    int newIntValue;

    float newFloatValue;

    string newStringValue;

    ss >> newIntValue >> newFloatValue >> newStringValue;

    cout << "Read values - Int: " << newIntValue << ", Float: " << newFloatValue << ", String: " << newStringValue << en

dl;

    return 0;

}


